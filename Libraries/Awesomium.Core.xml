<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Core</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Core.WebSessionCollection">
            <summary>
            Represents a collection of sessions maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebSessionCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{Awesomium.Core.WebSession})">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.ViewModel">
            <summary>
            This abstract class implements <see cref="T:System.IDisposable"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            and provides the main logic that helps subclasses be MVVM friendly.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Core.ViewModel.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Core.ViewModel.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Core.ViewModel.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ViewModel.OnDispose">
            <summary>
            Called when an instance of this class is being disposed.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ViewModel.OnDelete">
            <summary>
            Called when you need to invoke the native destructor of an instance, if any.
            </summary>
            <remarks>
            This method is not called for types with no public destructor in C++.
            The base method throws a <see cref="T:System.MethodAccessException"/>.
            </remarks>
            <exception cref="T:System.MethodAccessException">
            C++ destructor does not have public access
            </exception>
        </member>
        <member name="M:Awesomium.Core.ViewModel.Dispose">
            <summary>
            Perform cleanup of managed resources.
            </summary>
        </member>
        <member name="E:Awesomium.Core.ViewModel.PropertyChanged">
            <summary>
            Raised when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ViewModel.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FileDialogEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.FileDialogEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.FileDialogEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FocusChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.FocusChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.FocusChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.FocusChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.FocusChanged"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ShowJavascriptDialogEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:IWebView.ShowJavascriptDialog"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptDialogEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.JavascriptDialogEventArgs">
            <summary>
            Provides data for the <see cref="!:IWebView.ShowJavascriptDialog"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.Message">
            <summary>
            The message, if any, to be displayed by the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.DefaultPrompt">
            <summary>
            The default prompt provided by JS, for the dialog's prompt.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.FrameURL">
            <summary>
            Gets the address of the page that launches the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.Prompt">
            <summary>
            Gets or sets the text the user has provided to a
            <see cref="!:JSDialogFlags.HasPromptField"/> dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            The default is <c>false</c>.
            </summary>
            <remarks>
            When set to <c>false</c> (default), a technology specific
            <c>WebControl</c> may display its predefined dialog (if any).
            <p></p>
            You can set this property to <c>true</c> and handle the event
            in the following ways:
            <list type="table">
            <listheader>
            <term>Handling</term>
            <description>Procedure</description>
            </listheader>
            <item>
            <term>Asynchronously</term>
            <description>
            The WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>, automatically displays a 
            <see cref="T:Awesomium.Windows.Controls.WebControlJSDialogLayer"/> in response to the <see cref="!:IWebView.ShowJavascriptDialog"/> 
            event. Users can subclass <see cref="T:Awesomium.Windows.Controls.WebControlJSDialogLayer"/> to provide their own logic or 
            look and feel if they want. If you style your <see cref="T:Awesomium.Windows.Controls.WebControlJSDialogLayer"/>, simply assign the 
            <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond"/> command to the buttons of your dialog layer,
            specifying a <c>CommandParameter</c> of <c>true</c> or <c>false</c> to indicate <b>OK</b> or <b>Cancel</b> respectively.
            </description>
            </item>
            <item>
            <term>Modally</term>
            <description>
            In <see cref="T:Awesomium.Core.WebView"/> and any other technology specific <c>WebControl</c>, the <see cref="!:IWebView.ShowJavascriptDialog"/> event
            must be handled modally. Upon return, the <see cref="T:Awesomium.Core.WebView"/> and any other technology specific <c>WebControl</c>, internally
            responds to the calling web page.
            <h4>WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>:</h4>
            If you are using a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>, you can still handle the 
            <see cref="!:IWebView.ShowJavascriptDialog"/> event modally, by calling 
            <see cref="M:Awesomium.Windows.Controls.Utilities.Respond(Awesomium.Core.JavascriptDialogEventArgs)"/>
            when you are done with processing the event.
            <note type="caution">
            You must always call <see cref="M:Awesomium.Windows.Controls.Utilities.Respond(Awesomium.Core.JavascriptDialogEventArgs)"/> 
            if you handle the command modally.
            </note>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Attempting to set this property to <c>false</c> on a <see cref="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog"/> 
            that has already been modally handled by calling 
            <see cref="M:Awesomium.Windows.Controls.Utilities.Respond(Awesomium.Core.JavascriptDialogEventArgs)"/>.
            </exception>
        </member>
        <member name="T:Awesomium.Core.LoginRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:IWebView.LoginRequest"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoginRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoginRequestEventArgs">
            <summary>
            Provides data for the <see cref="!:IWebView.LoginRequest"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Username">
            <summary>
            Specify a Username as a response to the <see cref="!:IWebView.LoginRequest"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Password">
            <summary>
            Specify a Password as a response to the <see cref="!:IWebView.LoginRequest"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to false (default), a WebControl
            will display its predefined user interface.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ShowPopupMenuEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ShowPopupMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ShowPopupMenuEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CreateSurfaceEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CreateSurfaceEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CreateSurfaceEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CoreShutdownEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CoreShutdownEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CoreShutdownEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CoreStartEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CoreStartEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CoreStartEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreStartEventArgs.Configuration">
            <summary>
            Gets a <see cref="!:WebCoreConfig"/> instance specifying 
            the settings used to start the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CoreStartingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            An <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
            <p/>
            <note type="caution">
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            will prevent the <see cref="T:Awesomium.Core.WebCore"/> from starting. 
            Use with caution.
            </note>
            </param>
        </member>
        <member name="T:Awesomium.Core.CoreStartingEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreStartingEventArgs.Configuration">
            <summary>
            Gets a <see cref="!:WebCoreConfig"/> instance specifying 
            the settings that will be used to start the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
            <remarks>
            When <see cref="E:Awesomium.Core.WebCore.Starting"/> is fired, you can still modify the 
            configuration settings. The <see cref="T:Awesomium.Core.WebCore"/> is not initialized yet.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CreatedViewEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CreatedViewEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CreatedViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CreatedViewEventArgs.NewView">
            <summary>
            Gets the new view created by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ResponsiveChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ResponsiveChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ResponsiveChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ShowCreatedWebViewEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ShowCreatedWebViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CrashedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.Crashed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CrashedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CrashedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.Crashed"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameFailedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoadingFrameFailedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameFailedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FrameEventArgs">
            <summary>
            Provides data for events that provide a frame id.
            </summary>
        </member>
        <member name="T:Awesomium.Core.UrlEventArgs">
            <summary>
            Provides data for events that provide a URL.
            </summary>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoadingFrameEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CursorChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CursorChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CursorChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FrameEventHandler">
            <summary>
            Represents the method that will handle events that provide a frame id.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.FrameEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceInitializedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.ISurface.Initialized"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.SurfaceInitializedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceInitializedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.ISurface.Initialized"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceInitializedEventArgs.View">
            <summary>
            Gets the view the <see cref="T:Awesomium.Core.ISurface"/> instance has been assigned too.
            </summary>
            <remarks>
            A surface can only be assigned to a single view. It can however be reused as
            many times as needed, with the same view.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.SurfaceUpdatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.ISurface.Updated"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.SurfaceUpdatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.ISurface.Updated"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ToolTipChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ToolTipChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ToolTipChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip">
            <summary>
            Gets the current tooltip reported by a <see cref="T:Awesomium.Core.IWebView"/>,
            for the web-page element currently under the cursor, or a null reference
            if a previous tooltip is no longer valid.
            </summary>
            <remarks>
            A null reference indicates that the user has moved the cursor outside
            an area or element that had a tooltip. Any previously displayed tooltips,
            should be closed when a <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event with
            a null <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> is fired.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ToolTipChangedEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to false (default), a <c>WebControl</c>
            may display its predefined tooltip.
            </summary>
        </member>
        <member name="T:Awesomium.Core.TitleChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.TitleChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.TitleChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.TitleChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.TitleChanged"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.UrlEventHandler">
            <summary>
            Represents the method that will handle events that provide a URL.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.UrlEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WebSelectionChangedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.WebSelectionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WebSelectionEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.Selection">
            <summary>
            Gets a <see cref="P:Awesomium.Core.IWebView.Selection"/> providing information about the current selection range.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Awesomium.Core.AweRect.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.AweRect.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebURLMarshaler.GetInstance(System.String)">
            <summary>
            In addition to implementing the ICustomMarshaler interface, custom marshalers must implement a static method 
            called GetInstance that accepts a String as a parameter and has a return type of ICustomMarshaler. 
            This static method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler. 
            </summary>
            <param name="pstrCookie">
            A cookie that the method can use to customize the returned custom marshaler.
            </param>
            <returns>
            Guess what ^^
            </returns>
        </member>
        <member name="T:Awesomium.Core.ReleaseInfo">
            <summary>
            Specifies important versioning and identification constants used throughout the project.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.LIBRARY_VERSION">
            <summary>
            Specifies the native Awesomium library version.
            </summary>
            <remarks>
            <note type="caution">
            Always keep this synchronized with the current version of Awesomium.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.ASSEMBLY_VERSION">
            <summary>
            Specifies the Awesomium.Core assembly version.
            </summary>
            <remarks>
            This is used in various attributes of the assembly where file and assembly
            version is defined.
            <note type="caution">
            Always keep this synchronized with the current version of the assembly.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.PUBLIC_KEY_TOKEN">
            <summary>
            Specifies the Public Key Token of the assembly's Strong Name.
            </summary>
            <remarks>
            This is used with <see cref="F:Awesomium.Core.WebCore.DLLName"/> and allows indirect
            access to the Awesomium native library through the strong name of
            Awesomium.Core. It is necessary for installing the native dependencies
            in GAC.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_DESIGN_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls.Design
            assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls.Design assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.SWF_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Forms assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Forms assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.SWF_MONO_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Mono.Forms assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Mono.Forms assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.UNITY_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Unity assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Unity assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.GTK_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Mono.Gtk assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Mono.Gtk assembly.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CoreResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.AwesomiumChildProcessTest">
            <summary>
              Looks up a localized string similar to AwesomiumChildProcessTest.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ChildProcessTestDomainName">
            <summary>
              Looks up a localized string similar to Awesomium.ChildProcess.TestDomain.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJpegQuality">
            <summary>
              Looks up a localized string similar to Valid range is 0 to 100..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJSObject">
            <summary>
              Looks up a localized string similar to Cannot create a global javascript object before the view&apos;s process is created. Wait for the ProcessCreated event before creating a global javascript object..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidWebView">
            <summary>
              Looks up a localized string similar to This IWebView instance is invalid. It has either been destroyed or it was never properly instantiated..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidZoom">
            <summary>
              Looks up a localized string similar to Valid range is from 10 to 500..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_ViewWrapped">
            <summary>
              Looks up a localized string similar to The specified web-view instance has already been wrapped. You can access it through: WebCore.Views.GetByHandle.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_WebControlDisabled">
            <summary>
              Looks up a localized string similar to The control is disabled either manually or it has been destroyed..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TempCache">
            <summary>
              Looks up a localized string similar to {0}{1}TempCache{1}.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Crashed">
            <summary>
              Looks up a localized string similar to Crached!.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Error_1">
            <summary>
              Looks up a localized string similar to Error: {0}.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Error_2">
            <summary>
              Looks up a localized string similar to Error: {0} ({1}).
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Loading">
            <summary>
              Looks up a localized string similar to Loading....
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Navigating">
            <summary>
              Looks up a localized string similar to Navigating....
            </summary>
        </member>
        <member name="T:Awesomium.Core.Selection">
            <summary>
            Provides textual information about the current selection range of a page.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Selection.Empty">
            <summary>
            Represents an empty selection range.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Selection.Text">
            <summary>
            Gets the selected content in a page, in plain text form.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Selection.HTML">
            <summary>
            Gets the selected content in a page, in HTML form.
            </summary>
        </member>
        <member name="T:Awesomium.Core.SelectionHelper">
            <summary>
            This helper class is temporarily added, until we get a native way to access
            current selection changes and properties.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.RegisterSelectionHelper">
            <summary>
            Must be called once when the view is created.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.InjectSelectionHandlers">
            <summary>
            Must be called every time a new page is being loaded, at DOM ready time.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.IsSelectionObject(Awesomium.Core.JSObject)">
            <summary>
            Gets if the specified <see cref="T:Awesomium.Core.JSObject"/> is the
            global selection object.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.ClearSelection">
            <summary>
            Informs listeners of an empty selection.
            </summary>
        </member>
        <member name="M:Awesomium.Core.SelectionHelper.OnMethodCall(Awesomium.Core.IWebView,System.String,Awesomium.Core.JSValue[])">
            <summary>
            Should be called when the IJSMethodHandler gets a call from one of the
            selection global object methods.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SelectionHelper.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ViewInput">
            <summary>
            Indicates the types of input processed by an Awesomium <c>WebControl</c>.
            </summary>
            <remarks>
            <see cref="F:Awesomium.Core.ViewInput.Stylus"/> and <see cref="F:Awesomium.Core.ViewInput.Touch"/>
            are only processed by <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            instances.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Surface.OnInitialized(System.Object,Awesomium.Core.SurfaceInitializedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.Surface.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Surface.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.Surface.Updated"/> event.
            </summary>
        </member>
        <member name="E:Awesomium.Core.Surface.Initialized">
            <summary>
            Occurs when this surface is being initialized for use with a <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <remarks>
            This event can be called more than once if you are reusing this surface
            for multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <note>
            Once assigned to a view and initialized, a surface can only be used
            with that single view.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.Surface.Updated">
            <summary>
            Occurs when the surface has been updated.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ScrollEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:Surface.Scroll"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ScrollEventArgs">
            <summary>
            Provides data for the <see cref="!:Surface.Scroll"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PaintEventHandler">
            <summary>
            Represents the method that will handle the <see cref="M:Awesomium.Core.Surface.OnPaint(System.IntPtr,System.Int32,Awesomium.Core.AweRect@,Awesomium.Core.AweRect@)"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PaintEventArgs">
            <summary>
            Provides data for the <see cref="M:Awesomium.Core.Surface.OnPaint(System.IntPtr,System.Int32,Awesomium.Core.AweRect@,Awesomium.Core.AweRect@)"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.Property(System.String)">
            <summary>
            Gets or sets the value of the specified named property.
            </summary>
            <param name="propertyName">
            The name of the property whose value will be set or retrieved.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing the value of the specified named property.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnStart(Awesomium.Core.CoreStartingEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnStarted(Awesomium.Core.CoreStartEventArgs)">
            <summary>
            Triggers the Started event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnShutdown(Awesomium.Core.CoreShutdownEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnCreateView(Awesomium.Core.CreatedViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.CheckAccess">
            <summary>
            Checks thread affinity.
            </summary>
            <returns>
            True if called on the correct thread. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebCore.Start">
            <summary>
            Performs the actual initialization.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.Shutdown">
            <summary>
            Destroys the <see cref="T:Awesomium.Core.WebCore"/> and any lingering <see cref="T:Awesomium.Core.IWebView"/> instances.
            </summary>
            <remarks>
            Make sure that this is not called while the hosting UI of any views
            created by this <see cref="T:Awesomium.Core.WebCore"/>, is still live and visible. 
            This method will destroy all views created by this <see cref="T:Awesomium.Core.WebCore"/>.
            Any attempt to access them or any member of this class (other than <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            and <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>) after calling this method,
            may throw a <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebCore.Update">
            <summary>
            Updates the <see cref="T:Awesomium.Core.WebCore"/> and allows it to conduct various operations such
            as updating the render buffer of each view, destroying any views that are queued for destruction,
            and invoking any queued events (including <see cref="!:IWebView.IsDirtyChanged"/>.
            </summary>
            <remarks>
            If you are using Awesomium from a UI thread (regular use), you never need to call this method.
            If you are using Awesomium from a non graphical environment (Console application, Service or non-UI thread), 
            auto-update is not available and you must manually call this method from either your application's message loop 
            or by creating a timer. In this case, you must make sure that any calls to any of the classes of this assembly,
            are made from the same thread.
            <note>
            You can check <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> to know if auto-update is already enabled.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called before starting <see cref="T:Awesomium.Core.WebCore"/>.
            </exception>
            <exception cref="T:System.AccessViolationException">
            You attempted to access the member from a thread other than
            thread where <see cref="T:Awesomium.Core.WebCore"/> was created.
            </exception>
        </member>
        <member name="E:Awesomium.Core.WebCore.Starting">
            <summary>
            Occurs when the <see cref="T:Awesomium.Core.WebCore"/> is starting.
            </summary>
            <remarks>
            <note type="caution">
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            will prevent the <see cref="T:Awesomium.Core.WebCore"/> from starting. 
            Use with caution.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebCore.Started">
            <summary>
            Occurs right after the <see cref="T:Awesomium.Core.WebCore"/> has successfully started.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebCore.ShuttingDown">
            <summary>
            Occurs when the <see cref="T:Awesomium.Core.WebCore"/> is shutting down.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebCore.CreatedView">
            <summary>
            Occurs when a new view has been created by this <see cref="T:Awesomium.Core.WebCore"/>.
            The view can be a <see cref="T:Awesomium.Core.WebView"/> instance or any technology specific
            <c>WebControl</c>, all implementing the <see cref="T:Awesomium.Core.IWebView"/> interface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.PackagePath">
            <summary>
            Gets the path to the loaded native Awesomium library.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsRunning">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.WebCore"/> is currently running.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsShuttingDown">
            <summary>
            Gets if the WebCore is currently shutting down.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled">
            <summary>
            Gets if automatic update is successfully enabled.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Update"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.AutoUpdatePeriod">
            <summary>
            Gets or sets the time interval between invocations of <see cref="M:Awesomium.Core.WebCore.Update"/>, in milliseconds.
            The default is 20.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this before starting <see cref="T:Awesomium.Core.WebCore"/>.
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebCore.HomeURL">
            <summary>
            Gets or sets the URL that will be used as the Home URL
            for <see cref="T:Awesomium.Windows.Controls.WebControl"/>s.
            </summary>
            <remarks>
            This setting is used with <see cref="M:Awesomium.Core.IWebView.GoToHome"/>.
            It is also used by <see cref="T:Awesomium.Windows.Controls.WebControl"/>s to automatically
            handle the <see cref="P:System.Windows.Input.NavigationCommands.BrowseHome"/> command.
            The default is: "about:blank".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference or an empty string defined.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this before starting <see cref="T:Awesomium.Core.WebCore"/>.
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.GoToHome"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.Views">
            <summary>
            Gets a read-only collection of views maintained by this <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.Sessions">
            <summary>
            Gets a read-only collection of sessions maintained by this <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this <see cref="T:Awesomium.Core.WebView"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Core.WebView"/> instance
            (see <see cref="P:Awesomium.Core.WebView.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Core.WebView"/> instance
            (see <see cref="P:Awesomium.Core.WebView.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.#ctor(System.IntPtr)">
            <summary>
            Create a WebView wrapping an internally created web-view instance.
            </summary>
            <param name="handle">
            The handle to an internally created web-view.
            </param>
            <remarks>
            This constructor can be used to create a wrapper for a web-view that has been internally created by Awesomium.
            Views are created internally by Awesomium for external links that should be opened in a new view, or popup windows
            (See Javascript: <c>window.open</c>).
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Attempted to wrap a web-view instance that has already been wrapped.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the view to certain pixel dimensions.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.Title">
            <summary>
            Gets the title of the page currently loaded in this <see cref="T:Awesomium.Core.WebView"/>.
            </summary>
            <remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.WebView.NavigationInfo"/>.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebView.NavigationInfo"/>
        </member>
        <member name="P:Awesomium.Core.WebView.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary>
            <seealso cref="P:Awesomium.Core.WebView.Title"/>
        </member>
        <member name="P:Awesomium.Core.WebView.IsNavigating">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.IWebView"/> is currently navigating to a Url.
            </summary>
            <remarks>
            Unlike <see cref="P:Awesomium.Core.WebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.HasTargetURL">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.IWebView"/> is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.Selection">
            <summary>
            Gets a <see cref="P:Awesomium.Core.WebView.Selection"/> providing information about the current selection range.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with style="background-color: transparent;")
            </summary>
            <returns>
            A boolean value indicating whether or not this <see cref="T:Awesomium.Core.IWebView"/> is transparent.
            </returns>
            <remarks>
            <note type="caution">
            This property is incompatible with <see cref="!:FlushAlpha"/>. You need to make sure that <see cref="!:FlushAlpha"/>
            is set to <c>false</c> in order to set this property to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.Source">
            <summary>
            Gets or sets the current URL presented by this <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <returns>
            A <see cref="T:System.Uri"/> representing the current URL loaded 
            by this <see cref="T:Awesomium.Core.IWebView"/>.
            </returns>
            <seealso cref="M:Awesomium.Core.WebView.LoadURL(System.Uri)"/>
        </member>
        <member name="P:Awesomium.Core.WebView.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.WebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.WebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><c>Title</c> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><c>Title</c> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <c>Title</c> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            <p/>
            <note>
            Progress information can be localized by adding more localization resources
            to the assembly.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.WebMenuItemCollection">
            <summary>
            Represents a read-only collection of WebMenuItems.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebMenuItemCollection.#ctor(System.Collections.Generic.IList{Awesomium.Core.WebMenuItem})">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.WebViewCollection">
            <summary>
            Represents a collection of views maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{Awesomium.Core.IWebView})">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.Contains(System.IntPtr)">
            <summary>
            Determines whether an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, exists in the collection.
            </summary>
            <param name="instanceHandle">The handle to the <see cref="T:Awesomium.Core.IWebView"/> instance to locate.</param>
            <returns>
            <c>true</c> if an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle exists in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.GetByHandle(System.IntPtr)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, if any.
            </summary>
            <param name="instanceHandle">
            The handle to an <see cref="T:Awesomium.Core.IWebView"/> instance. (See <see cref="P:Awesomium.Core.IWebView.Instance"/>)
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, or <c>null</c> (<c>Nothing</c> in VB), 
            if the specified handle is not valid.
            </returns>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.SynchronousWindowPosition">
            <summary>If the calling thread and the thread that owns the window are attached to different input queues, 
            the system posts the request to the thread that owns the window. This prevents the calling thread from 
            blocking its execution while other threads process the request.</summary>
            <remarks>SWP_ASYNCWINDOWPOS</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DeferErase">
            <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
            <remarks>SWP_DEFERERASE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DrawFrame">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
            <remarks>SWP_DRAWFRAME</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.FrameChanged">
            <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to 
            the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE 
            is sent only when the window's size is being changed.</summary>
            <remarks>SWP_FRAMECHANGED</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.HideWindow">
            <summary>Hides the window.</summary>
            <remarks>SWP_HIDEWINDOW</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotActivate">
            <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the 
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter 
            parameter).</summary>
            <remarks>SWP_NOACTIVATE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotCopyBits">
            <summary>Discards the entire contents of the client area. If this flag is not specified, the valid 
            contents of the client area are saved and copied back into the client area after the window is sized or 
            repositioned.</summary>
            <remarks>SWP_NOCOPYBITS</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreMove">
            <summary>Retains the current position (ignores X and Y parameters).</summary>
            <remarks>SWP_NOMOVE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotChangeOwnerZOrder">
            <summary>Does not change the owner window's position in the Z order.</summary>
            <remarks>SWP_NOOWNERZORDER</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotRedraw">
            <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to 
            the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent 
            window uncovered as a result of the window being moved. When this flag is set, the application must 
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
            <remarks>SWP_NOREDRAW</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotReposition">
            <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
            <remarks>SWP_NOREPOSITION</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotSendChangingEvent">
            <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
            <remarks>SWP_NOSENDCHANGING</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreResize">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
            <remarks>SWP_NOSIZE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreZOrder">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
            <remarks>SWP_NOZORDER</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.ShowWindow">
            <summary>Displays the window.</summary>
            <remarks>SWP_SHOWWINDOW</remarks>
        </member>
    </members>
</doc>
